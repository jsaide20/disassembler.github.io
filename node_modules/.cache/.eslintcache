[{"/home/moosoo20/CS3339_proj/disassembler.github.io/src/index.js":"1","/home/moosoo20/CS3339_proj/disassembler.github.io/src/App.js":"2","/home/moosoo20/CS3339_proj/disassembler.github.io/src/pages/Help.js":"3","/home/moosoo20/CS3339_proj/disassembler.github.io/src/pages/ReportError.js":"4","/home/moosoo20/CS3339_proj/disassembler.github.io/src/pages/Instructions.js":"5","/home/moosoo20/CS3339_proj/disassembler.github.io/src/pages/About.js":"6","/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/navbar/index.js":"7","/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/hambar/index.js":"8","/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/disassembler/index.js":"9","/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/pageComponents/pageComponents.js":"10","/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/navbar/navBarComponents.js":"11","/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/hambar/hamburgerMenuComponents.js":"12","/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/disassembler/disassemblerComponents.js":"13"},{"size":303,"mtime":1639200885079,"results":"14","hashOfConfig":"15"},{"size":1378,"mtime":1639202133986,"results":"16","hashOfConfig":"15"},{"size":2968,"mtime":1639195494807,"results":"17","hashOfConfig":"15"},{"size":862,"mtime":1639195494807,"results":"18","hashOfConfig":"15"},{"size":1302,"mtime":1639195494807,"results":"19","hashOfConfig":"15"},{"size":1187,"mtime":1639195494807,"results":"20","hashOfConfig":"15"},{"size":1115,"mtime":1639195494792,"results":"21","hashOfConfig":"15"},{"size":977,"mtime":1639195494792,"results":"22","hashOfConfig":"15"},{"size":9396,"mtime":1639201757134,"results":"23","hashOfConfig":"15"},{"size":707,"mtime":1639195494792,"results":"24","hashOfConfig":"15"},{"size":2233,"mtime":1639195494792,"results":"25","hashOfConfig":"15"},{"size":1782,"mtime":1639195494792,"results":"26","hashOfConfig":"15"},{"size":2142,"mtime":1639195494792,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"o5u7x4",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/moosoo20/CS3339_proj/disassembler.github.io/src/index.js",[],"/home/moosoo20/CS3339_proj/disassembler.github.io/src/App.js",[],"/home/moosoo20/CS3339_proj/disassembler.github.io/src/pages/Help.js",[],"/home/moosoo20/CS3339_proj/disassembler.github.io/src/pages/ReportError.js",[],"/home/moosoo20/CS3339_proj/disassembler.github.io/src/pages/Instructions.js",[],"/home/moosoo20/CS3339_proj/disassembler.github.io/src/pages/About.js",[],"/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/navbar/index.js",[],"/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/hambar/index.js",[],"/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/disassembler/index.js",["55","56","57"],"import React, {useState} from 'react';\r\nimport {\r\n  OverallContainer,\r\n  LeftSideContainer,\r\n  RightSideContainer,\r\n  UploadBtn,\r\n  UploadSection,\r\n  UploadHidden,\r\n  ResultArea,\r\n  ResultTextArea,\r\n  DownloadBtn,\r\n  DownloadDiv,\r\n  StartBtn\r\n} from \"./disassemblerComponents\";\r\n// the r type instructions map will hold pairs of the instruction string and\r\n\r\n// funct code where the key is the hex funct, and the value is the string\r\n\r\nconst registers = ['$zero', '$at', '$v0', '$v1', '$a0', '$a1', '$a2', '$a3',\r\n\r\n  '$t0', '$t1', '$t2', '$t3', '$t4', '$t5', '$t6', '$t7', '$s0', '$s1', '$s2',\r\n\r\n  '$s3', '$s4', '$s5', '$s6', '$s7', '$t8', '$t9', '$k0', '$k1', '$gp', '$sp',\r\n\r\n  '$fp', '$ra'];\r\n\r\n\r\n\r\n\r\nconst r_instructions = new Map([\r\n\r\n  [0x20, 'add'], [0x21, 'addu'], [0x24, 'and'], [0x08, 'jr'], [0x27, 'nor'],\r\n\r\n  [0x25, 'or'], [0x2a, 'slt'], [ 0x2b, 'sltu',], [0x00, 'sll',], [0x02, 'srl',],\r\n\r\n  [0x22, 'sub'], [0x23, 'subu'], [0x1a, 'div'], [0x1b, 'divu'], [0x10, 'mfhi'],\r\n\r\n  [ 0x12, 'mflo'], [0x0, 'mfc0'], [0x18, 'mult'], [0x19, 'multu'], [0x3, 'sra'],[0xc, 'syscall'],[0xd,'break']]);\r\n\r\n\r\n\r\n\r\n//the i and j types will hold pairs of the string and opcode, where the opcode\r\n\r\n// is the key and the instruction is the value\r\n\r\n\r\n\r\n\r\nconst i_instructions = new Map([[0x8, 'addi'], [0x9, 'addiu'], [0xc, 'andi'],\r\n  [0x4, 'beq'], [0x5, 'bne'], [0x24, 'lbu'], [0x25, 'lhu'], [0x30, 'll'],\r\n  [0xf, 'lui'], [0x23, 'lw'], [0xd, 'ori'], [0xa, 'slti'], [0xb, 'sltiu'],\r\n  [0x28, 'sb'], [0x38, 'sc'], [0x29, 'sh'], [0x2b, 'sw']]);\r\n\r\n//TODO: ask about lwc1, ldc1, swc1, and sdc1, then add to map\r\n\r\nconst j_instructions = new Map([[0x2, 'j'], [0x3, 'jal']]);\r\n\r\nconst verilog_keys = new Map([['add','3rdrsrt'],['addu', '3rdrsrt'],['and','3rdrsrt'],['break', '0'],\r\n  ['div', '2rsrt'],['divu', '2rsrt'],['jr', '1rs'],['mfhi', '1rd'],['mflo', '1rd'],['mult','2rsrt'],\r\n  ['multu', '2rsrt'],['nor', '3rdrsrt'], ['or', '3rdrsrt'], ['or', '3rdrsrt'], ['sll', '3rdrtsa'],['sllv', '3rdrtrs']\r\n  ,['slt','3rdrsrt'],['sltu','3rdrsrt'],['sra', '3rdrtsa'], ['srl', '3rdrtrs'],['srlv', '3rdrsrt'],['sub', '3rdrsrt'],\r\n  ['subu', '3rdrsrt'],['syscall', '0'],['addi', '3rtrsim'],['addiu', '3rtrsim'],['andi', '3rtrsim'],['beq', '3rsrtlabel'],\r\n  ['bgez','2rslabel'],['bgtz','2rslabel'],['blez','2rslabel'],['bltz','2rslabel'],['bne','3rsrtlabel'],['lb', '2rtim(rs)'],\r\n  ['lbu','2rtim(rs)'],['lh', '2rtim(rs)'],['lhu','2rsim(rs)'],['lui','2rtim'],['lw','2rtim(rs)'],['lwcl', '2rtim(rs)'],\r\n  ['ori','3rtrsim'],['sb','2im(rs)'],['slti','3rtrsim'],['sltiu','3rtrsim'],['sh', '2rtim(rs)'],['sw','2rtim(rs)'],\r\n  ['swcl','2rtim(rs)'],['xori','3rtrsim'],['j','1label'],['jal','1label'],['jr','1rs']]);\r\n\r\n\r\n\r\n\r\nfunction start(instructions){\r\n  var delimiter = '\\n'\r\n  const output=[];\r\n  var i = 0;\r\n  var j = 0;\r\n\r\n  while((j = instructions.indexOf(delimiter, i)) !== -1){\r\n    var line = instructions.substring(i,j)\r\n    var opcode = getOpcode(line);\r\n    console.log(opcode)\r\n    var instType = getInstrType(opcode);\r\n    console.log(instType)\r\n    var instance=\"\"\r\n\r\n    if(instType === 'R'){\r\n      var funct = decodeFunct(line)\r\n      instance = r_instructions.get(funct);\r\n\r\n    }\r\n\r\n    else if (instType === 'I'){\r\n      var key = parseInt(opcode, 2)\r\n      instance = i_instructions.get(key)\r\n\r\n    }\r\n\r\n    else if(instType === 'J'){\r\n      var key = parseInt(opcode, 2)\r\n      instance = j_instructions.get(key)\r\n    }\r\n\r\n    else if(instType === 'F'){\r\n      output.push('FI and FR instructions not yet implemented')\r\n      i = j+1;\r\n      continue\r\n    }\r\n    console.log('instance: ')\r\n    console.log(instance)\r\n    let format = verilog_keys.get(instance);\r\n    console.log(format)\r\n    let fields = parseInt(format.substr(0,1))\r\n    format = format.substr(1,format.length-1)\r\n    if(fields === 0){\r\n\r\n      output.push(instance)\r\n      i = j+1;\r\n      continue\r\n\r\n    }else if (fields === 1){\r\n\r\n      if(format.length>2){\r\n        instance += ' label'\r\n      }\r\n\r\n      else {\r\n        instance += ' '\r\n        instance += computeRegister(separateRS(line))\r\n\r\n      }\r\n      output.push(instance)\r\n      i = j+1;\r\n      continue;\r\n\r\n    }else{\r\n      console.log(instance)\r\n      for(let k = 0; k<format.length; k+=2){\r\n        let temp = format[0+k] + format[1+k]\r\n        console.log(temp)\r\n        if(temp === 'rs'){\r\n          instance += ' ';\r\n          let rs = separateRS(line)\r\n          instance += computeRegister(rs)\r\n\r\n        }else if(temp === 'rt'){\r\n          instance += ' ';\r\n          let rt = separateRT(line)\r\n          instance += computeRegister(rt)\r\n        }else if (temp === 'rd'){\r\n          instance += ' ';\r\n          let rd = separateRD(line)\r\n          instance += computeRegister(rd)\r\n        }\r\n\r\n        else if(temp === 'im'){\r\n          let im = decodeImmediate(line)\r\n          instance += ' '\r\n          instance += im;\r\n          if(k+2 < fields.length){\r\n            instance += '('\r\n            instance += computeRegister(separateRS(line))\r\n            instance += ')'\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n    output.push(instance)\r\n    i = j+1;\r\n  }\r\n  //console.log(instructions.substring(i));\r\n  console.log(output)\r\n  return output\r\n}\r\n\r\nfunction getOpcode(instruction = '0123456'){\r\n  return instruction.substr(0,6);\r\n}\r\n//if opcode == 11(hex), FR or FI type\r\n\r\nfunction getInstrType(opcode = '000000'){\r\n  let decoded = parseInt(opcode, 2)\r\n  if(decoded === 0){\r\n    return 'R'\r\n  }\r\n\r\n  else if(decoded === 0x11){\r\n    return 'F' //TODO: for now. will change to handle FI types later\r\n  }\r\n\r\n  else{\r\n    if(i_instructions.has(decoded)){\r\n      return 'I'\r\n    }\r\n\r\n    else if(j_instructions.has(decoded)){\r\n      return 'J'\r\n    }\r\n  }\r\n}\r\n\r\nfunction separateRS(instruction){\r\n  return instruction.substr(6,5);\r\n}\r\n\r\nfunction separateRT(instruction){\r\n  return instruction.substr(11,5);\r\n}\r\n\r\nfunction separateRD(instruction){\r\n  return instruction.substr(16,5);\r\n}\r\n\r\nfunction computeRegister(regBits){\r\n  var pos = parseInt(regBits, 2)\r\n  console.log(pos)\r\n  var register = registers[pos]\r\n  console.log(register)\r\n  return register //returns string of decoded register vals\r\n\r\n}\r\n\r\nfunction decodeShamt(instruction){\r\n  var shamt = instruction.substr(6,5);\r\n  return parseInt(shamt, 2)\r\n\r\n}\r\n\r\nfunction decodeFunct(instruction){\r\n  var funct = instruction.substr(26,6);\r\n  return parseInt(funct,2)\r\n\r\n}\r\n\r\nfunction decodeImmediate(instruction){\r\n  var immediate = instruction.substr(16,16);\r\n  return parseInt(immediate,2)\r\n\r\n}\r\n\r\nfunction decodeAddress(instruction){\r\n  var address = instruction.substr(6,26);\r\n  return parseInt(address, 2)\r\n\r\n}\r\n\r\nfunction convertToOneString(arrayOutput) {\r\n  let result = '';\r\n  arrayOutput.forEach(function(item) {\r\n    result += item + \"\\n\";\r\n  });\r\n  return result;\r\n}\r\n\r\nconst Disassembler = () => {\r\n  const [fileContent, setFileContent] = useState(null);\r\n  const [textValue, setValue] = useState('');\r\n  const [reference, setRef] = useState(null);\r\n  const [isValidFile, setValidFile] = useState(false);\r\n\r\n  const hiddenFileInput = React.useRef(null); //aids in clicking hidden upload button\r\n\r\n  const verifyFileExtension = (file) => {\r\n    const extension = file.name.split('.').pop();\r\n    return (extension === 'txt');\r\n  }\r\n\r\n  const onChange = (event) => {\r\n    const reader = new FileReader();\r\n    const file = event.target.files[0];\r\n    if (verifyFileExtension(file)) {\r\n      reader.onload = function (event) {\r\n        setFileContent(event.target.result);\r\n      };\r\n      reader.readAsText(file); //needed for reader contents to appear\r\n      setValidFile(true);\r\n    }\r\n    else {\r\n      alert(\"Please Upload A .txt File\");\r\n      setValidFile(false);\r\n    }\r\n  }\r\n\r\n  //triggers the click on the hidden file input\r\n  const handleClick = () => {\r\n    hiddenFileInput.current.click();\r\n  };\r\n\r\n  const onStartClick = () => {\r\n    if (isValidFile) {\r\n      const resultOutput = start(fileContent);\r\n      const realOutput = convertToOneString(resultOutput);\r\n      setValue(realOutput); //set value so result area can display output\r\n      handleChange(realOutput);\r\n    }\r\n    else {\r\n      alert('Please Upload A File Before Clicking Start Button!');\r\n    }\r\n  }\r\n\r\n  const handleChange = (resultOutput) => {\r\n    const textFileBlob = new Blob([resultOutput], {type:'text/plain'});\r\n    setRef(window.webkitURL.createObjectURL(textFileBlob));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <OverallContainer>\r\n        <LeftSideContainer>\r\n          <UploadSection>\r\n            <UploadHidden type =\"file\" accept=\".txt\" ref={hiddenFileInput} onChange={onChange}/>\r\n            <UploadBtn onClick={handleClick}>BROWSE FILES</UploadBtn>\r\n            <UploadSection>\r\n              <br/>\r\n              <StartBtn onClick={onStartClick}>CLICK HERE TO START!</StartBtn>\r\n            </UploadSection>\r\n          </UploadSection>\r\n        </LeftSideContainer>\r\n        <RightSideContainer>\r\n          <ResultArea>\r\n            <ResultTextArea id='result-area' value={textValue}\r\n                            disabled onchange={handleChange} placeholder=\"Output Will Go Here\"/>\r\n          </ResultArea>\r\n          <br/>\r\n          <DownloadDiv>\r\n            <DownloadBtn href={reference}  download=\"output.txt\" id='link'>DOWNLOAD</DownloadBtn>\r\n          </DownloadDiv>\r\n        </RightSideContainer>\r\n      </OverallContainer>\r\n    </>\r\n  )\r\n}\r\nexport default Disassembler;\r\n","/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/pageComponents/pageComponents.js",[],"/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/navbar/navBarComponents.js",[],"/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/hambar/hamburgerMenuComponents.js",[],"/home/moosoo20/CS3339_proj/disassembler.github.io/src/components/disassembler/disassemblerComponents.js",[],{"ruleId":"58","severity":1,"message":"59","line":99,"column":11,"nodeType":"60","messageId":"61","endLine":99,"endColumn":14},{"ruleId":"62","severity":1,"message":"63","line":223,"column":10,"nodeType":"60","messageId":"64","endLine":223,"endColumn":21},{"ruleId":"62","severity":1,"message":"65","line":241,"column":10,"nodeType":"60","messageId":"64","endLine":241,"endColumn":23},"no-redeclare","'key' is already defined.","Identifier","redeclared","no-unused-vars","'decodeShamt' is defined but never used.","unusedVar","'decodeAddress' is defined but never used."]